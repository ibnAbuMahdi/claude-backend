# Generated by Django 4.2.7 on 2025-07-28 18:22

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('riders', '0002_rider_activated_at_rider_activation_attempts_and_more'),
        ('campaigns', '0004_pickuplocation'),
    ]

    operations = [
        migrations.CreateModel(
            name='GeofenceEntry',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entry_type', models.CharField(choices=[('enter', 'Entered Geofence'), ('exit', 'Exited Geofence')], max_length=10)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('recorded_at', models.DateTimeField()),
                ('entry_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exit_records', to='tracking.geofenceentry')),
                ('geofence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='campaigns.campaigngeofence')),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geofence_entries', to='riders.rider')),
            ],
            options={
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='RiderSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=0)),
                ('distance_covered', models.DecimalField(decimal_places=2, default=0, help_text='Distance covered in km during session', max_digits=10)),
                ('verification_count', models.PositiveIntegerField(default=0)),
                ('earnings_calculated', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('end_entry', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ended_session', to='tracking.geofenceentry')),
                ('geofence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='campaigns.campaigngeofence')),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_sessions', to='riders.rider')),
                ('start_entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='started_session', to='tracking.geofenceentry')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='LocationSyncBatch',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_id', models.CharField(max_length=36, unique=True)),
                ('total_records', models.PositiveIntegerField()),
                ('processed_records', models.PositiveIntegerField(default=0)),
                ('failed_records', models.PositiveIntegerField(default=0)),
                ('batch_created_at', models.DateTimeField()),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('received', 'Received'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Processed')], default='received', max_length=20)),
                ('error_log', models.JSONField(default=list)),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_batches', to='riders.rider')),
            ],
            options={
                'ordering': ['-received_at'],
            },
        ),
        migrations.CreateModel(
            name='LocationRecord',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mobile_id', models.CharField(help_text='UUID from mobile app', max_length=36, unique=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='GPS coordinates', srid=4326)),
                ('accuracy', models.FloatField(help_text='GPS accuracy in meters', validators=[django.core.validators.MinValueValidator(0)])),
                ('speed', models.FloatField(blank=True, help_text='Speed in km/h', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('heading', models.FloatField(blank=True, help_text='Heading in degrees', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('altitude', models.FloatField(blank=True, help_text='Altitude in meters', null=True)),
                ('recorded_at', models.DateTimeField(help_text='When location was recorded on mobile')),
                ('synced_at', models.DateTimeField(auto_now_add=True, help_text='When synced to server')),
                ('is_working', models.BooleanField(default=True)),
                ('sync_status', models.CharField(choices=[('pending', 'Pending Processing'), ('processed', 'Processed'), ('error', 'Processing Error')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional data from mobile app')),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_records', to='campaigns.campaign')),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_records', to='riders.rider')),
            ],
            options={
                'db_table': 'tracking_location_record',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddField(
            model_name='geofenceentry',
            name='source_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geofence_events', to='tracking.locationrecord'),
        ),
        migrations.CreateModel(
            name='EarningsCalculation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mobile_id', models.CharField(blank=True, help_text='UUID from mobile app if synced', max_length=36, null=True, unique=True)),
                ('earnings_type', models.CharField(choices=[('distance', 'Distance-based'), ('time', 'Time-based'), ('fixed', 'Fixed Rate'), ('hybrid', 'Hybrid'), ('bonus', 'Bonus'), ('correction', 'Correction')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='NGN', max_length=3)),
                ('distance_km', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('duration_hours', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('rate_applied', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('earned_at', models.DateTimeField()),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('calculated', 'Calculated'), ('paid', 'Paid'), ('disputed', 'Disputed')], default='calculated', max_length=20)),
                ('verifications_completed', models.PositiveIntegerField(default=0)),
                ('calculation_metadata', models.JSONField(default=dict, help_text='Additional calculation details')),
                ('geofence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_calculations', to='campaigns.campaigngeofence')),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_calculations', to='riders.rider')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='earnings', to='tracking.ridersession')),
            ],
            options={
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyTrackingSummary',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('total_locations_recorded', models.PositiveIntegerField(default=0)),
                ('total_distance_km', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('working_hours', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('geofences_visited', models.PositiveIntegerField(default=0)),
                ('geofence_entries', models.PositiveIntegerField(default=0)),
                ('geofence_exits', models.PositiveIntegerField(default=0)),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('completed_sessions', models.PositiveIntegerField(default=0)),
                ('abandoned_sessions', models.PositiveIntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('distance_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('time_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('bonus_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('verifications_completed', models.PositiveIntegerField(default=0)),
                ('sync_batches_count', models.PositiveIntegerField(default=0)),
                ('sync_success_rate', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('rider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_summaries', to='riders.rider')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddIndex(
            model_name='ridersession',
            index=models.Index(fields=['rider', 'started_at'], name='tracking_ri_rider_i_8dd807_idx'),
        ),
        migrations.AddIndex(
            model_name='ridersession',
            index=models.Index(fields=['geofence', 'started_at'], name='tracking_ri_geofenc_692c69_idx'),
        ),
        migrations.AddIndex(
            model_name='ridersession',
            index=models.Index(fields=['status'], name='tracking_ri_status_5f74cd_idx'),
        ),
        migrations.AddIndex(
            model_name='locationsyncbatch',
            index=models.Index(fields=['rider', 'received_at'], name='tracking_lo_rider_i_ba1405_idx'),
        ),
        migrations.AddIndex(
            model_name='locationsyncbatch',
            index=models.Index(fields=['status'], name='tracking_lo_status_6cc451_idx'),
        ),
        migrations.AddIndex(
            model_name='locationsyncbatch',
            index=models.Index(fields=['batch_id'], name='tracking_lo_batch_i_c96f05_idx'),
        ),
        migrations.AddIndex(
            model_name='locationrecord',
            index=models.Index(fields=['rider', 'recorded_at'], name='tracking_lo_rider_i_7a84e9_idx'),
        ),
        migrations.AddIndex(
            model_name='locationrecord',
            index=models.Index(fields=['campaign', 'recorded_at'], name='tracking_lo_campaig_68c1e4_idx'),
        ),
        migrations.AddIndex(
            model_name='locationrecord',
            index=models.Index(fields=['sync_status'], name='tracking_lo_sync_st_9763aa_idx'),
        ),
        migrations.AddIndex(
            model_name='locationrecord',
            index=models.Index(fields=['recorded_at'], name='tracking_lo_recorde_cc01e2_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceentry',
            index=models.Index(fields=['rider', 'recorded_at'], name='tracking_ge_rider_i_1c6cba_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceentry',
            index=models.Index(fields=['geofence', 'recorded_at'], name='tracking_ge_geofenc_6e40c2_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceentry',
            index=models.Index(fields=['entry_type', 'recorded_at'], name='tracking_ge_entry_t_762f9e_idx'),
        ),
        migrations.AddIndex(
            model_name='earningscalculation',
            index=models.Index(fields=['rider', 'earned_at'], name='tracking_ea_rider_i_951157_idx'),
        ),
        migrations.AddIndex(
            model_name='earningscalculation',
            index=models.Index(fields=['geofence', 'earned_at'], name='tracking_ea_geofenc_8d66d9_idx'),
        ),
        migrations.AddIndex(
            model_name='earningscalculation',
            index=models.Index(fields=['status'], name='tracking_ea_status_24890a_idx'),
        ),
        migrations.AddIndex(
            model_name='dailytrackingsummary',
            index=models.Index(fields=['rider', 'date'], name='tracking_da_rider_i_f96225_idx'),
        ),
        migrations.AddIndex(
            model_name='dailytrackingsummary',
            index=models.Index(fields=['date'], name='tracking_da_date_0ee10e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailytrackingsummary',
            unique_together={('rider', 'date')},
        ),
    ]
